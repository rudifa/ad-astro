---
// import { convertToHierarchy } from '../../util/json-to-d3-hierarchy';

// Define the hardcoded data
const jsonOneChild = {
  persons: [
    {
      name: 'Alice Johnson',
      father: 'Tom Johnson',
      mother: 'Mary Williams',
    },
    {
      name: 'Bob Johnson',
      father: 'Tom Johnson',
      mother: 'Mary Williams',
    },
  ],
};

console.log('jsonOneChild 1:', JSON.stringify(jsonOneChild, null, 2));

// // Convert the data to hierarchyData
// const hierarchyData = convertToHierarchy(jsonOneChild);

// console.log('hierarchyData 1:', JSON.stringify(hierarchyData, null, 2));

// // Define the props type for the conversion result
// interface HierarchyNode {
//   name: string;
//   children?: HierarchyNode[];
// }

// interface Props {
//   data: {
//     persons: Array<{
//       name: string;
//       father: string;
//       mother: string;
//     }>;
//   };
// }

// // Get the props
// const { data } = Astro.props;

// Convert the data from props to hierarchyDataFromProps
// const hierarchyDataFromProps = convertToHierarchy(data);
---

<!-- <div>
  <h1>Family Tree</h1>
  <h2>Hardcoded Data</h2>
  <pre>{JSON.stringify(hierarchyData, null, 2)}</pre>
  <h2>Data from Props</h2>
  <pre>{JSON.stringify(hierarchyDataFromProps, null, 2)}</pre>
</div>

<script>
  console.log('Hierarchy from hardcoded data:', hierarchyData);
  console.log('Hierarchy from props:', hierarchyDataFromProps);
</script> --><!-- <div>
  <h1>Family Tree</h1>
  <pre>{JSON.stringify(hierarchyData, null, 2)}</pre>
</div> --><!-- <div>
  <h1>Family Tree</h1>
  <pre>{JSON.stringify(jsonOneChild, null, 2)}</pre>
</div> --><!-- <script>
  console.log(jsonOneChild);
</script> --><!-- Use hierarchyData in your component -->
<script>
  //console.log(hierarchyData);
</script>

<!-- Example usage in your component --><!-- <div>
  <h1>Family Tree</h1>
  <pre>{JSON.stringify(hierarchyData, null, 2)}</pre>
</div> -->
<div id='family-tree'></div>
<script>
  import * as d3 from 'd3';

  const margin = { top: 20, right: 20, bottom: 20, left: 20 };
  const width = 800 - margin.left - margin.right;
  const height = 600 - margin.top - margin.bottom;

  const svg = d3
    .select('#family-tree')
    .append('svg')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
    .append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`);

  // hardcoded input data
  // const jsonOneChild = {
  //   persons: [
  //     {
  //       name: 'Alice Johnson',
  //       father: 'Tom Johnson',
  //       mother: 'Mary Williams',
  //     },
  //     {
  //       name: 'Bob Johnson',
  //       father: 'Tom Johnson',
  //       mother: 'Mary Williams',
  //     },
  //   ],
  // };

  // Hardcoded tree data
  const hierarchyData = {
    name: 'John Doe',
    children: [
      {
        name: 'Robert Doe',
        children: [{ name: 'William Doe' }, { name: 'Sarah Miller' }],
      },
      {
        name: 'Jane Smith',
        children: [{ name: 'Michael Smith' }, { name: 'Anna Johnson' }],
      },
    ],
  };

  // Create a tree layout
  const root = d3.hierarchy(hierarchyData);
  const treeLayout = d3.tree().size([width, height]);
  treeLayout(root);

  // Nodes
  svg
    .selectAll('g.node')
    .data(root.descendants())
    .enter()
    .append('g')
    .attr('class', 'node')
    .attr('transform', (d) => `translate(${d.x},${d.y})`)
    .each(function (d) {
      d3.select(this)
        .append('ellipse')
        .attr('cx', 0)
        .attr('cy', 0)
        .attr('rx', 50)
        .attr('ry', 20)
        .style('fill', '#69b3a2');

      d3.select(this)
        .append('text')
        .attr('x', 0)
        .attr('y', 5)
        .attr('text-anchor', 'middle')
        .text(d.data.name)
        .style('font-size', '12px')
        .style('fill', '#fff');
    });
  // Links
  svg
    .selectAll('line.link')
    .data(root.links())
    .enter()
    .append('line')
    .attr('class', 'link')
    .attr('x1', (d) => d.source.x)
    .attr('y1', (d) => d.source.y)
    .attr('x2', (d) => d.target.x)
    .attr('y2', (d) => d.target.y)
    .style('stroke', '#ccc');
</script>
