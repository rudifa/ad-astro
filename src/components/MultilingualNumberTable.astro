---
import AudioRow from './AudioRow.astro';
import Instructions from './Instructions.astro';

interface LanguageEntry {
  entry: [string | string[], string];
}

interface Props {
  data: {
    headers: LanguageEntry['entry'][];
    rows: (string | string[])[];
    title: string;
    description?: string[];
    instructions?: string[];
    audioFiles: string[];
  };
}

const { data } = Astro.props;

// Utility to determine text direction based on script
function getTextDirection(text: string): 'rtl' | 'ltr' {
  const rtlRegex = /[\u0590-\u05FF\u0600-\u06FF]/;
  return rtlRegex.test(text) ? 'rtl' : 'ltr';
}
---

<h2 class='title'>{data.title}</h2>

<Instructions instructions={data.description || []} />

<div class='table-container'>
  <table class='text-secondary bg-secondary'>
    <thead>
      <tr>
        {
          data.headers.map(([content, label]) => (
            <th>
              <div class='header-content'>
                {Array.isArray(content) ? (
                  content.map((item) => (
                    <span
                      class:list={[
                        'header-item',
                        getTextDirection(item) === 'rtl' ? 'rtl' : 'ltr',
                      ]}
                      set:html={item.replace('\n', '<br>')}
                    />
                  ))
                ) : (
                  <span
                    class:list={[
                      'header-item',
                      getTextDirection(content) === 'rtl' ? 'rtl' : 'ltr',
                    ]}
                    set:html={content.replace('\n', '<br>')}
                  />
                )}
              </div>
              {label && <div class='header-label'>{label}</div>}
            </th>
          ))
        }
      </tr>
      <AudioRow audioFiles={data.audioFiles} />
    </thead>
    <tbody>
      {
        data.rows.map((row) => (
          <tr>
            {row.map((cell) => {
              if (typeof cell === 'string') {
                return (
                  <td
                    class:list={[
                      getTextDirection(cell) === 'rtl' ? 'rtl' : 'ltr',
                    ]}
                    set:html={cell}
                  />
                );
              } else {
                return (
                  <td class='multi-cell-container'>
                    <div class='multi-cell'>
                      {cell.map((rep) => (
                        <div
                          class:list={[
                            'representation',
                            getTextDirection(rep) === 'rtl' ? 'rtl' : 'ltr',
                          ]}
                        >
                          <span set:html={rep} />
                        </div>
                      ))}
                    </div>
                  </td>
                );
              }
            })}
          </tr>
        ))
      }
    </tbody>
  </table>
</div>

<Instructions instructions={data.instructions || []} />

<style>
  .title {
    text-align: center;
    margin-bottom: 0.75rem;
    font-size: 1.8rem;
    font-weight: 600;
  }

  .description {
    text-align: center;
    margin-bottom: 1.5rem;
    font-size: 1.3rem;
    line-height: 1.4;
  }

  .table-container {
    width: 100%;
    max-width: 1024px;
    margin: 1rem auto;
    overflow-x: auto;
  }

  table {
    border-collapse: collapse;
    width: 1024px;
    font-size: 1.05rem;
    table-layout: fixed;
  }

  th,
  td {
    border: 1px solid var(--sl-color-neutral-300);
    padding: 0.75rem;
    text-align: start;
    word-break: break-word;
    overflow-wrap: break-word;
    max-width: 200px;
  }

  th {
    background-color: var(--sl-color-neutral-100);
    font-weight: 600;
  }

  tr:nth-child(odd) {
    background-color: var(--sl-color-neutral-50);
  }

  tr:hover {
    background-color: var(--sl-color-neutral-200);
  }

  .rtl {
    direction: rtl;
  }

  .ltr {
    direction: ltr;
  }

  .multi-cell-container {
    padding: 0.5rem;
  }

  .multi-cell {
    display: flex;
    flex-direction: column;
    gap: 0.3rem;
  }

  .representation {
    display: flex;
    align-items: center;
    justify-content: start;
    gap: 0.5rem;
  }

  .script-label {
    font-size: 0.8em;
    color: var(--sl-color-neutral-500);
  }

  @media (max-width: 768px) {
    .instructions p {
      max-width: 100%;
    }

    .instructions p {
      max-width: 100%;
    }

    table {
      font-size: 0.85rem;
    }

    th,
    td {
      padding: 0.5rem;
      max-width: none;
    }

    .title {
      font-size: 1.25rem;
    }

    .description {
      font-size: 1rem;
    }
  }
</style>
